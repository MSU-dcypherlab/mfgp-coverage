"""
trainer.py

Infers hyperparameters for single- and multi-fidelity GP classes given a sample of observed data. Once a distribution
is generated using distribution.py, trainer.py optimizes GP hyperparameters to be used with the given distribution
in simulator.py.

by: Andrew McDonald, D-CYPHER Lab, Michigan State University
last modified: 6/11/2020
"""

import numpy as np
import pandas as pd
from gaussian_process import MFGP, SFGP


def train_sfgp(name):
    """
    Infer hyperparameters for a single-fidelity GP model given training data generated by distribution.py

    :param name: [string] name of simulation, used to determine input and output filenames
                 (should match name used in distribution.py)
    :return: None (write hyperparameters to CSV if inference was successful)
    """

    # 1) load training data
    sifi = np.loadtxt("Data/" + name + "_sifi_train.csv",
                      skiprows=1, delimiter=',')                # train from mix of hifi and lofi sample data
    labels = ['mu_sf', 's^2_sf', 'L_sf', 'noise_sf']

    # 2) reshape training data from CSV to valid format
    X = sifi[:, [0, 1]].reshape(-1, 2)  # columns 0 and 1 are (x,y) points
    y = sifi[:, [2]].reshape(-1, 1)     # column 2 is f(x,y)

    # 3) initialize model with approximate lengthscale to accelerate training
    len_sf = 0.1
    model = SFGP(X, y, len_sf)

    # 4) train model and display results
    model.train()
    ehyp = np.exp(model.hyp)
    for i in range(len(labels)):
        print(labels[i] + ' : ' + str(ehyp[i]))

    # 5) save hyperparameters if training was a success
    valid = input("Save single-fidelity hyperparameters?")
    if valid.lower() == "y":
        hyp = model.hyp.reshape(1, -1)
        hyp_df = pd.DataFrame(hyp)
        hyp_df.columns = labels
        hyp_df.to_csv("Data/" + name + "_sf_hyp.csv", index=False)


def train_mfgp(name):
    """
    Infer hyperparameters for a multi-fidelity GP model given training data generated by distribution.py

    :param name: [string] name of simulation, used to determine input and output filenames
                 (should match name used in distribution.py)
    :return: None (write hyperparameters to CSV if inference was successful)
    """
    # 1) load training data
    lofi = np.loadtxt("Data/" + name + "_lofi_train.csv", skiprows=1, delimiter=',')
    hifi = np.loadtxt("Data/" + name + "_hifi_train.csv", skiprows=1, delimiter=',')
    labels = ['mu_lo', 's^2_lo', 'L_lo', 'mu_hi', 's^2_hi', 'L_hi', 'rho', 'noise_lo', 'noise_hi']

    # 2) reshape training data from CSV to valid format
    X_L = lofi[:, [0, 1]].reshape(-1, 2)  # columns 0, 1 are (x,y) points
    y_L = lofi[:, 2].reshape(-1, 1)  # column 2 is f(x,y)
    X_H = hifi[:, [0, 1]].reshape(-1, 2)
    y_H = hifi[:, 2].reshape(-1, 1)

    # 3) initialize model with approximate lengthscale to accelerate training
    len_L = 0.4
    len_H = 0.05
    model = MFGP(X_L, y_L, X_H, y_H, len_L, len_H)

    # 4) train model and display results
    model.train()
    ehyp = np.exp(model.hyp)
    for i in range(len(labels)):
        print(labels[i] + ' : ' + str(ehyp[i]))

    # 5) save hyperparameters if training was a success
    valid = input("Save multi-fidelity hyperparameters?")
    if valid.lower() == "y":
        hyp = model.hyp.reshape(1, -1)
        hyp_df = pd.DataFrame(hyp)
        hyp_df.columns = labels
        hyp_df.to_csv("Data/" + name + "_mf_hyp.csv", index=False)


if __name__ == "__main__":
    """
    Run selected hyperparameter inference algorithm
    """

    np.random.seed(1234)        # seed for reproducibility
    name = "two_corners"        # name of distribution to infer from
    train_mfgp(name)
